g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(aes(color=drv), size=4, alpha=1/2)
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(basE_family="Times")
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy,type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim(c(-3,3)))
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth(18497/30))
qplot(price,data=diamonds,binwidth=(18497/30))
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30, fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth="lm")
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut,facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(method="lm", size=3,color="pink")
ggplot(diamonds, aes(carat,price))+geom_boxplot+facet_grid(.~cut)
ggplot(diamonds, aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
# Library
library(dplyr)
# Set wd
setwd("D:/R Directories/Coursera/Reproducible Research/Course Project 2")
# Read in data
if (!file.exists("activity.csv")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileUrl, "Stormdata.csv.bz2")
df <- read.csv("Stormdata.csv.bz2")
invisible(rm(fileUrl))
} else {
df <- read.csv("Stormdata.csv.bz2")
}
names(df)
head(df$EVTYPE)
# Fatalities & Injuries
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
# Check missing values
mv <- colMeans(!is.na(dfs), na.rm=FALSE)
mv <- data.frame(Variables = names(mv), Percentage_filled=mv)
mv <- mv[order(mv$Percentage_filled, decreasing = TRUE), ]
row.names(mv) <- 1:length(mv$Variables)
View(mv)
unique(EVTYPE)
unique(dfs$EVTYPE)
str(dfs)
levels(dfs$PROPDMGEXP)
table(dfs$PROPDMGEXP)
View(table(dfs[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m")]))
View(table(dfs[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m"),]))
View(dfs[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m"),])
View(dfs[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m", " ", "B"),])
View(dfs[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m", "", "B"),])
unique(dfs$PROPDMG[dfs$PROPDMGEXP==""])
table(dfs$PROPDMG[dfs$PROPDMGEXP==""])
table(dfs)
table(dfs$PROPDMGEXP)
table(dfs$PROPDMG[dfs$PROPDMGEXP==""])
View(dfs[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m", "", "B"),])
View(dfs[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m", "", "B"),])
unique(dfs$PROPDMG[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m", "", "B")]))
unique(dfs$PROPDMG[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m", "", "B")])
table(dfs$PROPDMG[!dfs$PROPDMGEXP %in% c("h", "H", "K", "M", "m", "", "B")])
table(dfs$CROPDMGEXP)
table(dfs$CROPDMG[dfs$PROPDMGEXP==""])
order(table(dfs$CROPDMG[dfs$PROPDMGEXP==""]))
table(dfs$CROPDMG[dfs$PROPDMGEXP==""])
table(dfs$PROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == ""] <- 1
dfs$PROPDMGEXP == ""
sum(dfs$PROPDMGEXP == "")
table(dfs$PROPDMGEXP)
unique(df$EVTYPE)
df2 <- subset(df, EVTYPE != "?")
table(dfs$PROPDMGEXP)
class(dfs$PROPDMGEXP)
table(dfs$PROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == ""] <- 1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "+"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "?"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "-"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "0"] <- 1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "1"] <- 10^1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "2"] <- 10^2
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "3"] <- 10^3
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "4"] <- 10^4
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "5"] <- 10^5
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "6"] <- 10^6
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "7"] <- 10^7
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "8"] <- 10^8
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "B"] <- 10^9
dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("h", "H")] <- 10^2
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "K"] <- 10^3
dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("m", "M")] <- 10^6
table(dfs$PROPDMGEXP)
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == ""] <- 1
table(dfs$PROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "+"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "?"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "-"] <- 0
table(dfs$PROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "0"] <- 10^0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "1"] <- 10^1
table(dfs$PROPDMGEXP)
# Fatalities & Injuries
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "1 "] <- 10^1
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == 1] <- 10^1
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
dfs$PROPDMGEXP <- as.character(dfs$PROPDMGEXP)
table(dfs$PROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "0"] <- 10^0
table(dfs$PROPDMGEXP)
10^0
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
dfs$PROPDMGEXP <- as.character(dfs$PROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "1"] <- 10^1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "2"] <- 10^2
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "3"] <- 10^3
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "4"] <- 10^4
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "5"] <- 10^5
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "6"] <- 10^6
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "7"] <- 10^7
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "8"] <- 10^8
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "B"] <- 10^9
dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("h", "H")] <- 10^2
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "K"] <- 10^3
dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("m", "M")] <- 10^6
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "0"] <- 10^0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == ""] <- 1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "+"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "?"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "-"] <- 0
table(dfs$PROPDMGEXP)
mutate(dfs, Property_damage = PROPDMG * PROPDMGEXP)
mutate(dfs, Property_damage = PROPDMG * as.numeric(PROPDMGEXP))
View(dfs)
?mutate
dfs$PROPDMGEXP <- as.numeric(dfs$PROPDMGEXP)
mutate(dfs, Property_damage = PROPDMG*PROPDMGEXP)
dfs <- mutate(dfs, Property_damage = PROPDMG*PROPDMGEXP)
table(dfs$CROPDMGEXP)
dfs$CROPDMGEXP <- as.character(dfs$CROPDMGEXP)
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="2"] <- 10^2
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="B"] <- 10^9
dfs$CROPDMGEXP[dfs$CROPDMGEXP %in% c("k", "K")] <- 10^3
dfs$CROPDMGEXP[dfs$CROPDMGEXP %in% c("m", "M")] <- 10^2
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="0"] <- 10^0
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="?"] <- 0
dfs$CROPDMGEXP[dfs$CROPDMGEXP==""] <- 0
dfs$CROPDMGEXP <- as.numeric(dfs$CROPDMGEXP)
# Fatalities & Injuries
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
# Further check EXP variables
## Propdmg
table(dfs$PROPDMGEXP)
dfs$PROPDMGEXP <- as.character(dfs$PROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "1"] <- 10^1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "2"] <- 10^2
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "3"] <- 10^3
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "4"] <- 10^4
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "5"] <- 10^5
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "6"] <- 10^6
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "7"] <- 10^7
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "8"] <- 10^8
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "B"] <- 10^9
dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("h", "H")] <- 10^2
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "K"] <- 10^3
dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("m", "M")] <- 10^6
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "0"] <- 10^0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == ""] <- 1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "+"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "?"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "-"] <- 0
dfs$PROPDMGEXP <- as.numeric(dfs$PROPDMGEXP)
## Cropdmg
table(dfs$CROPDMGEXP)
dfs$CROPDMGEXP <- as.character(dfs$CROPDMGEXP)
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="2"] <- 10^2
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="B"] <- 10^9
dfs$CROPDMGEXP[dfs$CROPDMGEXP %in% c("k", "K")] <- 10^3
dfs$CROPDMGEXP[dfs$CROPDMGEXP %in% c("m", "M")] <- 10^2
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="0"] <- 10^0
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="?"] <- 0
dfs$CROPDMGEXP[dfs$CROPDMGEXP==""] <- 0
dfs$CROPDMGEXP <- as.numeric(dfs$CROPDMGEXP)
# New variables
dfs %>%
mutate(Property_damage = PROPDMG*PROPDMGEXP) %>%
mutate(Crop_damage = CROPDMG*CROPDMGEXP) -> dfs
table(dfs$CROPDMGEXP)
table(dfs$PROPDMGEXP)
table(dfs$INJURIES)
?gather
# Library
library(dplyr)
?gather
?melt
library(tidyr)
?gather
dfs_g <- gather(dfs, Population_harm, amount, -EVTYPE)
View(dfs_g)
dfs_g <- summarise(group_by(dfs_g, EVTYPE, Population_harm), Mean = mean(amount))
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g <- gather(dfs_g, Population_harm, amount, -EVTYPE)
dfs_g <- summarise(group_by(dfs_g, EVTYPE, Population_harm), Mean = mean(amount))
dfs_g <- order(summarise(group_by(dfs_g, EVTYPE, Population_harm),
Mean = mean(amount)), desc(Mean))
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g <- gather(dfs_g, Population_harm, amount, -EVTYPE)
dfs_g <- order(summarise(group_by(dfs_g, EVTYPE, Population_harm),
Mean = mean(amount)), desc(Mean))
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g <- gather(dfs_g, Population_harm, amount, -EVTYPE)
dfs_g <- summarise(group_by(dfs_g, EVTYPE, Population_harm),
Mean = mean(amount))
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE, Population_harm) %>%
summarise(Total = sum(amount)) -> dfs_g
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE, Population_harm) %>%
summarise(Total = sum(amount)) -> dfs_g
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) -> dfs_g
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) %>%
order(desc(Total)) -> dfs_g
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) %>%
order(desc(Total)) -> dfs_g
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) -> dfs_g
dfs_g <- order(dfs_g, desc(Total))
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) -> dfs_g
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) -> dfs_g
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) %>%
order(desc(dfs_g$Total)) -> dfs_g
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) -> dfs_g
dfs_g <- order(dfs_g, desc(dfs_g$Total))
# ggplot df for first question
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) -> dfs_g
class(dfs_g$Total)
?order
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) %>%
arrange(desc(Total)) -> dfs_g
# ggplot df for first question
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) %>%
arrange(desc(Total)) %>%
slice(Total, 1:10) -> dfs_g
?slice
# ggplot df for first question
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) %>%
arrange(desc(Total)) %>%
slice(1:10) -> dfs_g
dfs_g <- select(dfs, EVTYPE, INJURIES, FATALITIES)
dfs_g %>%
mutate(TOTAL = INJURIES+FATALITIES) %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES), Fatalities = sum(FATALITIES),
Total = sum(TOTAL)) %>%
arrange(desc(Total)) %>%
slice(1:10) %>%
gather(Population_harm, amount, -EVTYPE) -> dfs_g
# plot
g <- ggplot(dfs_g, aes(x=EVTYPE, y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(color=Population_harm))
library(ggplot2)
# plot
g <- ggplot(dfs_g, aes(x=EVTYPE, y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(color=Population_harm))
g <- ggplot(dfs_g, aes(x=EVTYPE, y=amount, group=Population_harm))
g +
geom_bar(aes(color=Population_harm))
# plot
g <- ggplot(dfs_g, aes(x=EVTYPE, y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge")
?reorder
# plot
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -Population_harm), y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge")
?reorder
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, amount), y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge")
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -amount), y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge")
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -amount), y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge") +
scale_y_sqrt("Frequency Count")
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -amount), y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge") +
scale_y_sqrt()
# plot
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -amount), y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge") +
scale_y_sqrt() +
labs(x="Event", y="Frequency count", legend="Population Harm")
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -amount), y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge") +
scale_y_sqrt() +
labs(x="Event", y="Frequency count", title="Population health impact top 10 of storm events in the United States")
# plot
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -amount), y=amount, group=Population_harm))
g +
geom_bar(stat="identity", aes(fill=Population_harm), position="dodge") +
scale_y_sqrt() +
labs(x="Event", y="Frequency count", title="Population health impact top 10 of storm events in the United States") +
theme(axis.text.x = element_text(angle=45, hjust=1))
dfs_g <- select(dfs, EVTYPE, Property_damage, Crop_damage)
dfs_g %>%
mutate(Total = Property_damage + Crop_damage) %>%
group_by(EVTYPE) %>%
summarise(Property_damage = sum(Property_damage), Crop_damage = sum(Crop_damage),
Total = sum(Total)) %>%
arrange(desc(Total)) %>%
slice(1:10) %>%
gather(Damage_type, Amount, -EVTYPE) -> dfs_g
# plot
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -Amount), y=Amount, group=Damage_type))
g +
geom_bar(stat="identity", aes(fill=Damage_type), position="dodge") +
scale_y_sqrt() +
labs(x="Event", y="Damage (in Dollars)", title="Damage impact top 10 of storm events in the United States") +
theme(axis.text.x = element_text(angle=45, hjust=1))
# Select the required data
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
# Further check EXP variables
## Propdmg
table(dfs$PROPDMGEXP)
dfs$PROPDMGEXP <- as.character(dfs$PROPDMGEXP)
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "1"] <- 10^1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "2"] <- 10^2
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "3"] <- 10^3
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "4"] <- 10^4
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "5"] <- 10^5
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "6"] <- 10^6
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "7"] <- 10^7
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "8"] <- 10^8
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "B"] <- 10^9
dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("h", "H")] <- 10^2
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "K"] <- 10^3
dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("m", "M")] <- 10^6
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "0"] <- 10^0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == ""] <- 1
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "+"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "?"] <- 0
dfs$PROPDMGEXP[dfs$PROPDMGEXP == "-"] <- 0
dfs$PROPDMGEXP <- as.numeric(dfs$PROPDMGEXP)
## Cropdmg
table(dfs$CROPDMGEXP)
dfs$CROPDMGEXP <- as.character(dfs$CROPDMGEXP)
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="2"] <- 10^2
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="B"] <- 10^9
dfs$CROPDMGEXP[dfs$CROPDMGEXP %in% c("k", "K")] <- 10^3
dfs$CROPDMGEXP[dfs$CROPDMGEXP %in% c("m", "M")] <- 10^6
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="0"] <- 10^0
dfs$CROPDMGEXP[dfs$CROPDMGEXP=="?"] <- 0
dfs$CROPDMGEXP[dfs$CROPDMGEXP==""] <- 0
dfs$CROPDMGEXP <- as.numeric(dfs$CROPDMGEXP)
# New variables
dfs %>%
mutate(Property_damage = PROPDMG*PROPDMGEXP) %>%
mutate(Crop_damage = CROPDMG*CROPDMGEXP) -> dfs
# ggplot df for second question
dfs_g <- select(dfs, EVTYPE, Property_damage, Crop_damage)
dfs_g %>%
mutate(Total = Property_damage + Crop_damage) %>%
group_by(EVTYPE) %>%
summarise(Property_damage = sum(Property_damage), Crop_damage = sum(Crop_damage),
Total = sum(Total)) %>%
arrange(desc(Total)) %>%
slice(1:10) %>%
gather(Damage_type, Amount, -EVTYPE) -> dfs_g
# plot
g <- ggplot(dfs_g, aes(x=reorder(EVTYPE, -Amount), y=Amount, group=Damage_type))
g +
geom_bar(stat="identity", aes(fill=Damage_type), position="dodge") +
scale_y_sqrt() +
labs(x="Event", y="Damage (in Dollars)", title="Damage impact top 10 of storm events in the United States") +
theme(axis.text.x = element_text(angle=45, hjust=1))
version
unique(df$EVTYPE)
dim(df)
names(df)
dim
nrow(df)
ncol(df)
?nrow
str(dfs)
unique(dfs$EVTYPE)
table(dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("-", "?", "+")])
table(dfs$PROPDMGEXP)
# Select the required data
dfs <- select(df, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG,
CROPDMGEXP)
table(dfs$PROPDMGEXP[dfs$PROPDMGEXP %in% c("-", "?", "+")])
table(dfs$PROPDMGEXP)
