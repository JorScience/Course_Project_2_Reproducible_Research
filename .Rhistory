select(cran, -(X:size))
select(cran, -5:20)
select(cran, -(5:20))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version) == TRUE)
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize( by_package, mean(size))
# Compute four values, in the following order, from
# the grouped data:
#
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count()))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
reset()
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library("tidyr")
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, grade, sex_class, count, male_1:female_2)
gather(students2, grade, sex_class, count, -male_1:female_2)
gather(students2, grade, sex_class, count, -grade)
res <- gather(students2, grade, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit()
?parse_number
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(passed, status = "failed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?seperate
?separate
submit()
submit()
submit()
submit()
install.packages("foreign")
library(foreign)
data <- read.arff("C:/Users/JorZ/Desktop/BreastCancerAll.arff")
colnames(data)
tail(data)
data[, 12181]
data2 <- read.arff("BreastCancerAll.reduced.using.cfs.arff")
data2 <- read.arff("C:/Users/JorZ/Desktop/BreastCancerAll.reduced.using.cfs.arff.arff")
data2 <- read.arff("C:/Users/JorZ/Desktop/BreastCancerAll.reduced.using.cfs.arff")
data2
colnames(data2)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
install.packages(ggplot2)
install.packages("ggplot2")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist((subset(pollution, region == "west"))$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude ~ pm25))
with(pollution, plot(latitude, pm25))
?abline
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main =  "West")
plot(east$latitude, east$pm25, main =  "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
getwd()
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
lattice(life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
airquality
head(airquality)
range(airquality$ozone, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
?points
?pch
points(may, pch = 2, col = "blue")
points(may$Wind, may$Ozone, col="blue", pch = 17)
notmay <- subset(airquality, Month != 5)
?pch
points(notmay$Wind, notmay$Ozone, col="red", pch = 8)
legend("topright", pch = c(17,8), col("blue", "red"), legend = c("May", "Other Months"))
legend("topright", pch = c(17,8), col = ("blue", "red"), legend = c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
?abline
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma=c(0,0,2,0))
?oma
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp airquality$Ozone, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
?ls
?rm
rm(list = ls())
set.wd("C:/R Directories/Coursera/Exploratory Data Analysis/Assignment 1")
setwd("C:/R Directories/Coursera/Exploratory Data Analysis/Assignment 1")
setwd("C:/R Directories/")
getwd()
setwd("C:/R Directories")
setwd("C:\R Directories")
setwd(C:/R Directories)
setwd("C:/R Directories")
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, col ="red", pch =8, main ="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip = FALSE, pch = 20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut, data=diamonds, pch = 20, xlab=myxlab, ylab=myylab, main=mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data=mpg, color = drv)
qplot(y=hwy, data=mpg, color = drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color = manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets= . ~ drv)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth=2)
qplot(data - displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(aes(color=drv), size=4, alpha=1/2)
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(basE_family="Times")
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy,type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim(c(-3,3)))
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth(18497/30))
qplot(price,data=diamonds,binwidth=(18497/30))
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30, fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth="lm")
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut,facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(method="lm", size=3,color="pink")
ggplot(diamonds, aes(carat,price))+geom_boxplot+facet_grid(.~cut)
ggplot(diamonds, aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
setwd("D:/R Directories/Coursera/Reproducible Research/Course Project 2")
# Set wd
setwd("D:/R Directories/Coursera/Reproducible Research/Course Project 2")
# Read in data
if (!file.exists("activity.csv")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileUrl, "Stormdata.csv.bz2")
df <- read.csv("Stormdata.csv.bz2")
invisible(rm(fileUrl))
} else {
df <- read.csv("Stormdata.csv.bz2")
}
asdas
asd
names(df)
dim(df)
str(df)
# Check missing values
mv <- colMeans(!is.na(df), na.rm=FALSE)
mv <- data.frame(Variables = names(mv), Percentage_filled=mv)
mv <- mv[order(mv$Variables, decreasing = TRUE), ]
row.names(mv) <- 1:length(mv$Variables)
View(mv)
dim(df)
names(df)
unique(df$EVTYPE)
names(df)
head(df$INJURIES)
head(df$FATALITIES)
head(df$FATALITIES, 200)
head(df$BGN_DATE)
head(df$END_DATE)
# Check missing values
mv <- colMeans(!is.na(df), na.rm=FALSE)
mv <- data.frame(Variables = names(mv), Percentage_filled=mv)
mv <- mv[order(mv$Percentage_filled, decreasing = TRUE), ]
row.names(mv) <- 1:length(mv$Variables)
View(mv)
names(df)
levels(df$STATE__)
unique(df$STATE)
unique(df$COUNTY)
names(df)
head(df$PROPDMG)
head(df$PROPDMGEXP)
head(df$PROPDMGEXP, 50)
head(df$PROPDMGEXP, 250)
View(df)
View(head(df[df$PROPDMGEXP=="?"])
)
View(head(df[df$PROPDMGEXP=="?", ])
)
View(head(df[df$PROPDMGEXP=="-", ])
)
View(head(df[df$PROPDMGEXP=="+", ]))
View(head(df[df$PROPDMGEXP=="0", ]))
View(head(df[df$PROPDMGEXP=="1", ]))
table(df$PROPDMGEXP)
t <- subset(df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
?subset
# Library
library(dplyr)
t <- select(df, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
View(t[t$PROPDMGEXP != "m" | "M" | "k" | "M" | " ", ])
t2 <- t[t$PROPDMGEXP != "m" | "M" | "k" | "M" | " ", ]
t2 <- t[t$PROPDMGEXP != c("m","M","k","M"," "), ]
?filter
t2 <- filter(t, PROPDMGEXP != c("m","M","k","M"," "))
t2 <- filter(t, !PROPDMGEXP %in% c("m","M","k","M"," "))
t2 <- filter(t, !(PROPDMGEXP %in% c("m","M","k","M"," ")))
unique(df$PROPDMGEXP)
df$PROPDMGEXP=="K"
names(t)
head(t$PROPDMGEXP %in% c("m","M","k","M"," "))
head(t$PROPDMGEXP)
head(t$PROPDMGEXP %in% c("m","M","k", "K", "b", "B", " "))
table(t$PROPDMGEXP)
sum(t$PROPDMGEXP==" ")
sum(t$PROPDMGEXP=="")
head(t$PROPDMGEXP %in% c("m","M","k", "K", "b", "B", ""))
t2 <- t[t$PROPDMGEXP %in% c("m","M","k", "K", "b", "B", ""),]
t2 <- t[!(t$PROPDMGEXP %in% c("m","M","k", "K", "b", "B", "")),]
View(t2)
